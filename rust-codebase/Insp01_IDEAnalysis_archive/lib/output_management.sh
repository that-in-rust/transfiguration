#!/bin/bash

# Output Management and Documentation System
# Part of Kiro Behavioral Analysis Pipeline
# Compatible with bash 3.2 (macOS default)

# Progress tracking (using simple variables)
PROGRESS_TOTAL_PHASES=6
PROGRESS_COMPLETED_PHASES=0
PROGRESS_CURRENT_PHASE=""
PROGRESS_TOTAL_FILES=0
PROGRESS_PROCESSED_FILES=0

# Output directory structure
OUTPUT_BASE_DIR=""
OUTPUT_STRUCTURE="config api ui behavior reports logs temp"

# Initialize output management system
init_output_management() {
    local output_dir="$1"
    
    OUTPUT_BASE_DIR="$output_dir"
    
    log_info "Initializing output management system: $output_dir"
    
    # Create directory structure
    create_output_directories "$output_dir"
    
    # Initialize progress tracking
    init_progress_tracking "$output_dir"
    
    # Create initial status file
    update_analysis_status "initialized" "Output management system initialized"
    
    log_success "Output management system initialized"
}

# Create structured output directories
create_output_directories() {
    local base_dir="$1"
    
    log_debug "Creating output directory structure"
    
    # Create base directory
    mkdir -p "$base_dir"
    
    # Create all subdirectories
    for dir_name in $OUTPUT_STRUCTURE; do
        mkdir -p "$base_dir/$dir_name"
        log_debug "Created directory: $base_dir/$dir_name"
    done
    
    # Create subdirectories for organized output
    mkdir -p "$base_dir/config"/{commands,settings,keybindings,menus,themes}
    mkdir -p "$base_dir/api"/{interfaces,contribution_points,activation_events,compatibility}
    mkdir -p "$base_dir/ui"/{components,layouts,styling,animations,assets}
    mkdir -p "$base_dir/behavior"/{events,state,performance,errors}
    mkdir -p "$base_dir/reports"/{summary,cross_references,validation}
    mkdir -p "$base_dir/logs"/{analysis,errors,debug}
    
    # Create initial status files
    echo "Analysis started at $(date -Iseconds)" > "$base_dir/logs/analysis_start.log"
    echo "{\"status\": \"initialized\", \"timestamp\": \"$(date -Iseconds)\"}" > "$base_dir/status.json"
    
    # Create README files
    create_main_readme "$base_dir"
    
    log_debug "Output directory structure created successfully"
}

# Create main README file
create_main_readme() {
    local base_dir="$1"
    
    cat > "$base_dir/README.md" << 'EOF'
# Kiro Behavioral Analysis Results

This directory contains the complete analysis results from the Kiro behavioral discovery pipeline.

## Directory Structure

- `config/` - Configuration analysis results (package.json, settings, commands, etc.)
- `api/` - API surface mapping results (interfaces, contribution points, compatibility)
- `ui/` - UI structure analysis results (components, styling, themes, assets)
- `behavior/` - Behavioral pattern inference results (events, state, performance)
- `reports/` - Summary reports and cross-reference documentation
- `logs/` - Analysis execution logs and debug information
- `temp/` - Temporary files and intermediate processing results

## Analysis Phases

1. **File Discovery & Validation** - Inventory and validate all extracted files
2. **Configuration Analysis** - Extract commands, settings, keybindings, menus
3. **API Surface Mapping** - Document extension APIs and contribution points
4. **UI Structure Analysis** - Analyze components, styling, and visual assets
5. **Behavioral Pattern Inference** - Infer runtime behaviors from code patterns
6. **Integration & Documentation** - Generate comprehensive behavioral specification

Generated by Kiro Behavioral Analysis Pipeline v1.0.0
EOF
}

# Progress tracking functions
init_progress_tracking() {
    local output_dir="$1"
    
    local progress_file="$output_dir/progress.json"
    
    # Initialize progress tracking file
    cat > "$progress_file" << EOF
{
    "analysis_id": "kiro_analysis_$(date +%s)",
    "start_time": "$(date -Iseconds)",
    "status": "initialized",
    "total_phases": $PROGRESS_TOTAL_PHASES,
    "completed_phases": $PROGRESS_COMPLETED_PHASES,
    "current_phase": null,
    "statistics": {
        "total_files": 0,
        "processed_files": 0,
        "errors": 0,
        "warnings": 0
    },
    "last_updated": "$(date -Iseconds)"
}
EOF
    
    log_debug "Progress tracking initialized: $progress_file"
}

update_progress() {
    local phase_name="$1"
    local status="$2"
    local details="$3"
    
    PROGRESS_CURRENT_PHASE="$phase_name"
    if [[ "$status" == "completed" ]]; then
        PROGRESS_COMPLETED_PHASES=$((PROGRESS_COMPLETED_PHASES + 1))
    fi
    
    log_debug "Progress updated: $phase_name -> $status"
}

# Status reporting
update_analysis_status() {
    local status="$1"
    local message="$2"
    
    local status_file="$OUTPUT_BASE_DIR/status.json"
    
    cat > "$status_file" << EOF
{
    "status": "$status",
    "message": "$message",
    "timestamp": "$(date -Iseconds)",
    "progress": {
        "completed_phases": $PROGRESS_COMPLETED_PHASES,
        "total_phases": $PROGRESS_TOTAL_PHASES,
        "current_phase": "$PROGRESS_CURRENT_PHASE",
        "percentage": $(( (PROGRESS_COMPLETED_PHASES * 100) / PROGRESS_TOTAL_PHASES ))
    }
}
EOF
    
    log_info "Status: $status - $message"
}

# Safe output writing
safe_write_output() {
    local output_file="$1"
    local data="$2"
    
    # Create directory if it doesn't exist
    mkdir -p "$(dirname "$output_file")"
    
    # Write data to file
    echo "$data" > "$output_file"
    
    log_debug "Output written successfully: $output_file"
    return 0
}

# Cross-reference generation
generate_cross_references() {
    local output_dir="$1"
    
    log_info "Generating cross-reference documentation"
    
    local cross_ref_file="$output_dir/reports/cross_references/index.json"
    local cross_ref_md="$output_dir/reports/cross_references/index.md"
    
    mkdir -p "$(dirname "$cross_ref_file")"
    
    # Initialize cross-reference structure
    local cross_refs='{
        "files_to_categories": {},
        "generated_at": "'$(date -Iseconds)'"
    }'
    
    safe_write_output "$cross_ref_file" "$cross_refs"
    
    # Generate markdown report
    cat > "$cross_ref_md" << 'EOF'
# Cross-Reference Index

This document provides cross-references between different analysis components.

Generated by Kiro Behavioral Analysis Pipeline v1.0.0
EOF
    
    log_success "Cross-reference documentation generated"
}

# Summary report generation
generate_summary_report() {
    local output_dir="$1"
    
    log_info "Generating comprehensive summary report"
    
    local summary_file="$output_dir/reports/summary/behavioral_specification.json"
    local summary_md="$output_dir/reports/summary/behavioral_specification.md"
    
    mkdir -p "$(dirname "$summary_file")"
    
    # Create comprehensive summary
    local behavioral_spec='{
        "kiro_behavioral_spec": {
            "version": "1.0.0",
            "metadata": {
                "analysis_version": "1.0.0",
                "generated_at": "'$(date -Iseconds)'",
                "vs_code_base_version": "1.103.2"
            },
            "validation": {
                "completed_at": "'$(date -Iseconds)'",
                "status": "in_progress"
            }
        }
    }'
    
    safe_write_output "$summary_file" "$behavioral_spec"
    
    # Generate markdown summary
    cat > "$summary_md" << EOF
# Kiro Behavioral Specification

**Generated**: $(date -Iseconds)  
**Version**: 1.0.0  

## Overview

This document contains the complete behavioral specification for Kiro.dev extracted through static analysis of the application files.

## Analysis Summary

### Analysis Phases

1. ✅ **File Discovery & Validation** - Completed
2. 🔄 **Configuration Analysis** - In Progress  
3. ⏳ **API Surface Mapping** - Pending
4. ⏳ **UI Structure Analysis** - Pending
5. ⏳ **Behavioral Pattern Inference** - Pending
6. ⏳ **Integration & Documentation** - Pending

---

*Generated by Kiro Behavioral Analysis Pipeline v1.0.0*
EOF
    
    log_success "Summary report generated: $summary_md"
}

# Analysis statistics collection
collect_analysis_statistics() {
    local output_dir="$1"
    
    local stats_file="$output_dir/reports/analysis_statistics.json"
    
    # Create comprehensive statistics
    local statistics='{
        "analysis": {
            "completed_phases": '$PROGRESS_COMPLETED_PHASES',
            "total_phases": '$PROGRESS_TOTAL_PHASES',
            "completion_percentage": '$(( (PROGRESS_COMPLETED_PHASES * 100) / PROGRESS_TOTAL_PHASES ))'
        },
        "generated_at": "'$(date -Iseconds)'"
    }'
    
    safe_write_output "$stats_file" "$statistics"
    
    log_info "Analysis statistics collected: $stats_file"
}

# Export functions for use by main script
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    export -f init_output_management create_output_directories
    export -f update_progress update_analysis_status
    export -f safe_write_output generate_cross_references generate_summary_report
    export -f collect_analysis_statistics
fi